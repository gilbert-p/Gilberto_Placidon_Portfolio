{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useEffect","gsap","to","duration","repeat","transformOrigin","rotation","ease","className","id","stroke","strokeDasharray","strokeDashoffset","pathLength","r","fill","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sKAAAA,EAAOC,QAAU,IAA0B,kC,oHCiI5BC,MA5Hf,WAiDE,OAhDAC,qBAAU,WAENC,IAAKC,GAAG,UAAW,CACjBC,SAAU,EACVC,QAAS,EACTC,gBAAiB,gBACjBC,SAAU,IACVC,KAAM,WAERN,IAAKC,GAAG,UAAW,CACjBC,SAAU,GACVC,QAAS,EACTC,gBAAiB,gBACjBC,UAAW,IACXC,KAAM,WAERN,IAAKC,GAAG,UAAW,CACjBC,SAAU,GACVC,QAAS,EACTC,gBAAiB,gBACjBC,SAAU,IACVC,KAAM,WAERN,IAAKC,GAAG,UAAW,CACjBC,SAAU,GACVC,QAAS,EACTC,gBAAiB,gBACjBC,UAAW,IACXC,KAAM,WAERN,IAAKC,GAAG,UAAW,CACjBC,SAAU,GACVC,QAAS,EACTC,gBAAiB,gBACjBC,SAAU,IACVC,KAAM,WAERN,IAAKC,GAAG,UAAW,CACjBC,SAAU,GACVC,QAAS,EACTC,gBAAiB,gBACjBC,UAAW,IACXC,KAAM,aAIT,IAGD,oCACE,yBAAKC,UAAU,kBACb,yBAAKC,GAAG,mBACN,wBAAIA,GAAG,QAAP,qBACA,wBAAIA,GAAG,aAAP,uBAGF,yBAAKD,UAAU,0BACb,6BACE,4BACEC,GAAG,SACHC,OAAO,wBACPC,gBAAgB,KAChBC,iBAAiB,KACjBC,WAAW,KACXC,EAAE,MACFC,KAAK,SACP,6BACE,4BACEN,GAAG,SACHC,OAAO,sBACPC,gBAAgB,KAChBC,iBAAiB,KACjBC,WAAW,KACXC,EAAE,MACFC,KAAK,UAET,6BACE,4BACEN,GAAG,SACHC,OAAO,sBACPC,gBAAgB,KAChBC,iBAAiB,KACjBC,WAAW,KACXC,EAAE,MACFC,KAAK,UAET,6BACE,4BACEN,GAAG,SACHC,OAAO,sBACPC,gBAAgB,KAChBC,iBAAiB,KACjBC,WAAW,KACXC,EAAE,MACFC,KAAK,UAET,6BACE,4BACEN,GAAG,SACHC,OAAO,qBACPC,gBAAgB,KAChBC,iBAAiB,MACjBC,WAAW,KACXC,EAAE,MACFC,KAAK,UAET,6BACE,4BACEN,GAAG,SACHC,OAAO,sBACPC,gBAAgB,KAChBC,iBAAiB,MACjBC,WAAW,KACXC,EAAE,MACFC,KAAK,eC5GDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a982d496.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.scss\";\nimport { gsap } from \"gsap\";\n\nfunction App() {\n  useEffect(() => {\n    function geometricCircle() {\n      gsap.to(\"#circ-1\", {\n        duration: 5,\n        repeat: -1,\n        transformOrigin: \"center center\",\n        rotation: 360,\n        ease: \"linear\",\n      });\n      gsap.to(\"#circ-2\", {\n        duration: 10,\n        repeat: -1,\n        transformOrigin: \"center center\",\n        rotation: -360,\n        ease: \"linear\",\n      });\n      gsap.to(\"#circ-3\", {\n        duration: 15,\n        repeat: -1,\n        transformOrigin: \"center center\",\n        rotation: 360,\n        ease: \"linear\",\n      });\n      gsap.to(\"#circ-4\", {\n        duration: 20,\n        repeat: -1,\n        transformOrigin: \"center center\",\n        rotation: -360,\n        ease: \"linear\",\n      });\n      gsap.to(\"#circ-5\", {\n        duration: 25,\n        repeat: -1,\n        transformOrigin: \"center center\",\n        rotation: 360,\n        ease: \"linear\",\n      });\n      gsap.to(\"#circ-6\", {\n        duration: 30,\n        repeat: -1,\n        transformOrigin: \"center center\",\n        rotation: -360,\n        ease: \"linear\",\n      });\n    }\n    geometricCircle();\n  }, []);\n\n  return (\n    <>\n      <div className=\"grid-container\">\n        <div id=\"title-container\">\n          <h1 id=\"name\">Gilberto Placidon</h1>\n          <h2 id=\"sub-title\">Frontend Developer</h2>\n        </div>\n\n        <div className=\"swiss-circle-container\">\n          <svg>\n            <circle\n              id=\"circ-1\"\n              stroke=\"hsla(285,79%,76%,0.8)\"\n              strokeDasharray=\"10\"\n              strokeDashoffset=\"10\"\n              pathLength=\"11\"\n              r=\"400\"\n              fill=\"none\"></circle>\n            <svg>\n              <circle\n                id=\"circ-2\"\n                stroke=\"hsla(330,75%,62%,1)\"\n                strokeDasharray=\"10\"\n                strokeDashoffset=\"10\"\n                pathLength=\"12\"\n                r=\"420\"\n                fill=\"none\"></circle>\n            </svg>\n            <svg>\n              <circle\n                id=\"circ-3\"\n                stroke=\"hsla(150,35%,80%,1)\"\n                strokeDasharray=\"10\"\n                strokeDashoffset=\"10\"\n                pathLength=\"13\"\n                r=\"457\"\n                fill=\"none\"></circle>\n            </svg>\n            <svg>\n              <circle\n                id=\"circ-4\"\n                stroke=\"hsla(200,65%,65%,1)\"\n                strokeDasharray=\"10\"\n                strokeDashoffset=\"10\"\n                pathLength=\"18\"\n                r=\"525\"\n                fill=\"none\"></circle>\n            </svg>\n            <svg>\n              <circle\n                id=\"circ-5\"\n                stroke=\"hsla(50,65%,65%,1)\"\n                strokeDasharray=\"30\"\n                strokeDashoffset=\"-15\"\n                pathLength=\"30\"\n                r=\"653\"\n                fill=\"none\"></circle>\n            </svg>\n            <svg>\n              <circle\n                id=\"circ-6\"\n                stroke=\"hsla(175,65%,65%,1)\"\n                strokeDasharray=\"35\"\n                strokeDashoffset=\"-15\"\n                pathLength=\"45\"\n                r=\"900\"\n                fill=\"none\"></circle>\n            </svg>\n          </svg>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}